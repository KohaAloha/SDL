
=head1 NAME

SDLx::Music - A powerful, convenient interface to C<SDL::Mixer::Music>

=head1 CATEGORY

Extension

=head1 SYNOPSIS

 use SDL;
 use SDLx::Music;

 my $music = SDLx::Music->new;

 #define music data with just a name and file path
 $music->data(
     fast => 'music/fast.ogg',
     slow => 'music/slow.ogg',
     magical => 'music/magic/cake.ogg',
 );

 #define more the long way with a parameter hash
 $music->data(
     squelch => {
         file    => 'music/squelch.ogg',
         loops   => 3,
         fade_in => 0.5,
         volume  => 72,
     }
     splurge => {
         file     => 'music/splurge.ogg',
         finished => sub { print 'Splurged!' },
     },
 );

 #instead, do it the short way with the help of defaults

 #clobber everything
 $music->clear;

 #specify the class-wide default for file extension
 SDLx::Music->default->ext('.ogg');

 #specify the object-wide default for file directory
 $music->default->dir('music/');

 #redefine squelch and splurge
 $music->data(
     squelch => {
         #file defaults to the data name, so the path becomes
         #'music/squelch.ogg', which is what we wanted
         loops   => 3,
         fade_in => 0.5,
         volume  => 72,
     }
     splurge => {
         finished => sub { print 'Splurged!' },
     },
 );

 #and we can redefine the others like this
 $music->data_for(
     'fast',
     'slow',
 )->data(
     magical => 'magic/cake',
 );

 #get to that named data
 my $splurge = $music->data('splurge');

 #and add to/modify it without clobbering existing data
 $splurge->params(
     volume => 55,
	 file   => 'data/' . $splurge->file,
 );

 #or if you prefer
 $splurge
     ->volume(55)
     ->file  ('data/' . $splurge->file)
 ;

 #play it once, fading in for 2 seconds
 $music->play($splurge, loops => 1, fade_in => 2);
 #(it will be loaded automatically and played with its specified params)

 sleep 5;

 #pause it
 $music->pause if $music->playing;

 #load every unloaded music file
 $music->load;

 #resume playing it at a lower volume
 $music->volume(44);
 $music->play;

 sleep 5;

 #get the names for all music
 my @names = keys %{ $music->data };

 for my $name (@names) {
     #play it in an infinite loop
     $music->play($name, loops => 0);
     warn "Cake!" if $music->playing->name eq "magical";
     sleep 10;
 }

 #fade the last song out
 $music->fade_out(5);

 sleep 5;

=head1 DESCRIPTION

This class provides a powerful and convenient interface to L<SDL::Mixer::Music>. The main goal was to make music code neater and clearer. To achieve this, this class provides class-wide and object-wide defaults and it automatically shares duplicate use of files.

The following document is intended for reference. For a more beginner-friendly description of this class, see chapter X of the SDL Perl Manual (when it is written).

B<Please note:> do not mix use of this class with L<SDL::Mixer::Music> if you want everything to work right.

=head1 METHODS

=head2 new

 my $music = SDLx::Music->new( $name );
 my $music = SDLx::Music->new( %args );

Creates and returns the new music object. Initializes audio with a call to L<< SDLx::Mixer::init|SDLx::Mixer/init >>, if it hasn't been already (if you want more precise control over what is initialized, make sure you call L<< SDLx::Mixer::init|SDLx::Mixer/init >> before you call this method). Creates an empty default data object for object-wide defaults. If arguments are supplied, calls L<data|/data> with them to set up any initial data objects.

=head2 data

 $music->data;
 $music->data( $name );
 $music->data( $data );
 $music->data( %args );

With no arguments: returns a reference to the data hash. This hash has data names as keys and the associated data objects as values.

With a name: creates the data name if it doesn't already exist. Does this with a call to L<< SDLx::Music::Data->new|SDLx::Music::Data/new >> with the name and puts the new object in the data hash under the key of the name. Returns the data object.

With a data object: adds the data object to the data hash, with the key of its L<name|SDLx::Music::Data/name>. Returns the data object.

With a hash of arguments: for each pair, hands the value to L<< SDLx::Music::Data->new|SDLx::Music::Data/new >> along with the name of its key. The value can be a filename, for the object's initial L<file|SDLx::Music::Data/file> param. It can be a param hashref where the keys are params and their values are used to set the params. Or it can be a data object that gets cloned and renamed to the key. Each new object is then put into the data hash under the key of its key. Returns C<$music>.

=head2 data_for

 $music->data_for( @names_or_data_objects );

Calls L<data|/data> repeatedly, passing it one element of the list at a time, initializing empty names and/or adding data objects. Returns C<$music>.

=head2 has_data

 $music->has_data;
 $music->has_data( $name );
 $music->has_data( $data );

Without arguments: returns how many data objects the class has.

With a name: returns the data object for C<$name>. If there is no data object for C<$name> it is not created and undef is returned instead.

With a data object: does a (quick-ish) reverse of the data hash to see if the data object belongs to C<$music>. Returns it or undef.

=head2 default

 $music->default;
 SDLx::Music->default;
 $music->default( %params );
 SDLx::Music->default( %params );

Without arguments: returns the default data object belonging to C<$music> (created in L<new|/new>), or to the class (depending on how the method is invoked). See L<SDLx::Music::Data's Default Objects section|SDLx::Music::Data/Default Objects> for information on how defaults work.

With arguments: does the same but instead of returning the appropriate default object, calls L<params|SDlx::Music::Data/params> on it and passes it the param list.

=head2 load

 $music->load;
 $music->load( @names_or_data_objects );
 SDLx::Music->load( @data_objects );

Without arguments: for every data object belonging to C<$music>, if the data object doesn't already have a L<loaded|SDLx::Music::Data/loaded> file, loads the file named by its L<path|SDLx::Music::Data/path> if it hasn't been loaded already. Sets the data object's L<loaded|SDLx::Music::Data/loaded> parameter to this.

If the file path of a data object has been changed and its music file needs to be reloaded, delete its L<loaded|SDLx::Music::Data/loaded> parameter, or L<unload|/unload> it before calling C<load> to load the new music file.

Two or more objects that use the same file will use the same loaded file. Reference counting is respected, so if two data objects use the same loaded file it will be removed from memory only after both are destroyed. Returns C<$music>.

With arguments: does the same, but only for the names or data objects in the list. If there isn't a data object for any name, it will be created.

=head2 unload

 $music->unload;
 $music->unload( @names_or_data_objects );
 SDLx::Music->unload( @data_objects );

Without arguments: clears the L<loaded|SDLx::Music::Data/loaded> parameter for all of the data objects in C<$music>. The loaded file is removed from memory if it loses its last reference to it. Returns C<$music>.

With arguments: does the same, but only for the names or data objects in the list. Doesn't create a data object for a name that doesn't exist.

=head2 clear

 $music->clear;
 $music->clear( @names );

Without arguments: empties C<$music>'s data hash of all of its objects. The objects will be destroyed only if the last reference to them is removed, and no data object's parameters will be cleared if this is not the case. Returns C<$music>.

With arguments: does the same, but only deletes the values of the data hash for the names in the list.

=head2 play

 $music_or_class->play;
 $music->play( $name_or_data, %params );
 SDLx::Music->play( $data, %params );

Without arguments: resumes paused music (L<SDL::Mixer::Music::resume_music|SDL::Mixer::Music/resume_music>). Returns the object or class.

With arguments: plays the music (L<SDL::Mixer::Music::play_music|SDL::Mixer::Music/play_music> or L<SDL::Mixer::Music::fade_in_music|SDL::Mixer::Music/fade_in_music>) found in C<$music>'s C<$name>, or in C<$data> (depending on which is specified). L<load|/load>s it if it needs to be loaded (which in turn creates the name if it needs to be created). The C<%params> are all optional and, if defined, are used instead of the values returned by the data object's parameter methods. The accepted parameters here are:

=over

=item * L<loops|SDLx::Music::Data/loops>

Plays the music file C<loops> times. If C<loops> is 0, loops it infinitely.

=item * L<fade_in|SDLx::Music::Data/fade_in>

Fades the music in for its first C<fade_in> seconds, if C<fade_in> is defined.

=item * L<vol|SDLx::Music::Data/vol>

Sets the music volume with the method L<vol|/vol> to the value C<vol>, if C<vol> is defined.

=item * L<vol_portion|SDLx::Music::Data/vol_portion>

Multiplies the C<vol> by C<vol_portion> (recommended are values 0 to 1) before setting the volume.

=item * L<pos|SDLx::Music::Data/pos>

Sets the music position with the method L<pos|/pos> to C<pos> seconds, if C<pos> is defined.

=back

Once the values in C<%params> have been used, they are not set as the new parameters for the data object. They are discarded instead, so act as this-time-only stand-in values. Returns the object or class.

=head2 pause

 $music_or_class->pause;

Pauses the music if it's playing (L<SDL::Mixer::Music::pause_music|SDL::Mixer::Music/pause_music>). Returns the object or class.

=head2 stop

 $music_or_class->stop;

Stops the music if it's playing (L<SDL::Mixer::Music::halt_music|SDL::Mixer::Music/halt_music>). Returns the object or class.

=head2 last_played

 my $data = $music_or_class->last_played;

Returns the data object that was L<play|/play>ed last.

=head2 playing

 my $data = $music_or_class->playing;

If the music is playing (L<SDL::Mixer::Music::playing_music|SDL::Mixer::Music/playing_music>), returns the data object that was L<play|/play>ed last. Otherwise, returns undef.

=head2 paused

 my $data = $music_or_class->paused;

If the music is paused (L<SDL::Mixer::Music::paused_music|SDL::Mixer::Music/paused_music>), returns the data object that was L<play|/play>ed last. Otherwise, returns undef.

=head2 vol

 my $volume = $music_or_class->vol;
 $music_or_class->vol( $volume );
 $music_or_class->vol( $data );

(L<SDL::Mixer::Music::volume_music|SDL::Mixer::Music/volume_music>)

Without arguments: returns the current music volume.

With a volume: sets the music volume to C<$volume>. This value must be from 0 to 128 (L<SDL::Mixer::MIX_MAX_VOLUME|SDL::Mixer/CONSTANTS>). The value is not automatically multiplied by any data object's L<vol_portion|SDLx::Music::Data/vol_portion> parameter, so do that explicitly unless it's not required. Returns the object or class.

With a data object: sets the music volume to the value specified by the data object, if it is defined, like L<play|/play> does. This value is the object's L<vol|SDLx::Music::Data/vol_portion> parameter multiplied by its L<vol_portion|SDLx::Music::Data/vol_portion> parameter.

=head2 fade_out

 $music_or_class->fade_out( $seconds );
 $music_or_class->fade_out( $data );

(L<SDL::Mixer::Music::fade_out_music|SDL::Mixer::Music/fade_out_music>)

With a seconds value: fades the music out for its next specified seconds. Returns the object or class.

With a data object: does the same, but fades the music out with the value specified by the data object, if it is defined.

=head2 fading

 my $fading = $music_or_class->fading;

Returns -1 if the music is fading in, 0 if it's not fading, and 1 if it's fading out (L<SDL::Mixer::Music::fading_music|SDL::Mixer::Music/fading_music>).

=head2 rewind

 $music_or_class->rewind;

Rewinds the music to its start (L<SDL::Mixer::Music::rewind_music|SDL::Mixer::Music/rewind_music>). Returns the object or class.

=head2 pos

 $music_or_class->pos( $seconds );
 $music_or_class->pos( $data );

(L<SDL::Mixer::Music::set_music_position|SDL::Mixer::Music/set_music_position>)

With a seconds value: sets the music position to the specified seconds. It does different things for different file types, so see L<SDL::Mixer::Music::set_music_position|SDL::Mixer::Music/set_music_position> for details. Returns the object or class.

With a data object: does the same, but sets the music position to the value specified by the data object, if it's defined, like L<play|/play> does.

=head1 TODO

 SDL::Mixer::Music::hook_music
 SDL::Mixer::Music::get_music_hook_data

=head1 SEE ALSO

L<SDLx::Music::Data>,
L<SDLx::Mixer>,
L<SDL::Mixer::Music>,
L<SDL::Mixer>

=head1 AUTHORS

See L<SDL/AUTHORS>.

=head1 COPYRIGHT & LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
