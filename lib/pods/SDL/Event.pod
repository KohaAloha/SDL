=pod

=head1 NAME

SDL::Event - General event structure

=head1 SYNOPSIS

 use SDL::Event;                             # for the event object itself
 use SDL::Events qw(pump_events poll_event); # functions for event queue handling
 
 SDL::init(SDL_INIT_VIDEO);
 my $event = SDL::Event->new();
 
 while(1)
 {
     pump_events();

     if(poll_event($event))
     {
        if($event->type == SDL_MOUSEBUTTONDOWN)
        {
            # now you can handle the details
            $event->button_which;
            $event->button_button;
            $event->button_x;
            $event->button_y;
        }
        
        last if $event->type == SDL_QUIT;
     }

     # your screen drawing code will be here
 }
 
=head1 DESCRIPTION

Event handling allows your application to receive input from the user. 
Event handling is initalised (along with video) with a call to:

C<SDL::init(SDL_INIT_VIDEO);>

Internally, SDL stores all the events waiting to be handled in an event queue. 
Using functions like C<SDL::Events::poll_event()>, C<SDL::Events::peep_events> 
and C<SDL::Events::wait_event()> you can observe and handle waiting input events.

The key to event handling in SDL is the C<SDL::Event> union. 
The event queue itself is composed of a series of C<SDL::Event> unions, one for each waiting event. 
C<SDL::Event> unions are read from the queue with the C<SDL::Events::poll_event()> function 
and it is then up to the application to process the information stored with them. 

=head1	METHODS

=head2	new

C<new> creates an empty event-object, which can be used store information. 
Either by calling C<poll_event($event)> that transferes one event from the queue into our object 
or by setting all the needed data manually in order to push the event to the queue.

 use SDL::Event;

 my $event = SDL::Event->new();
 
=head2	type

SDL::Event is a union of all event structures used in SDL, using it is a simple matter of knowing 
which union member relates to which event C<type>.

 print 'heureka' if $event->type = SDL_MOUSEBUTTONDOWN;

Available type constants:

=over 4

=item *

L<SDL_ACTIVEEVENT|/active> - Application visibility event structure 

=item *

L<SDL_KEYDOWN|/active> - Keyboard event structure 

=item *

L<SDL_KEYUP|/active> - Keyboard event structure 

=item *

L<SDL_MOUSEMOTION|/active> - Mouse motion event structure 

=item *

L<SDL_MOUSEBUTTONDOWN|/active> - Mouse button event structure 

=item *

L<SDL_MOUSEBUTTONUP|/button> - Mouse button event structure 

=item *

L<SDL_JOYAXISMOTION|/active> - Joystick axis motion event structure 

=item *

L<SDL_JOYBALLMOTION|/active> - Joystick trackball motion event structure 

=item *

L<SDL_JOYHATMOTION|/active> - Joystick hat position change event structure 

=item *

L<SDL_JOYBUTTONDOWN|/active> - Joystick button event structure 

=item *

L<SDL_JOYBUTTONUP|/active> - Joystick button event structure 

=item *

L<SDL_VIDEORESIZE|/active> - Window resize event structure 

=item *

L<SDL_VIDEOEXPOSE|/active> - Window expose event 

=item *

L<SDL_QUIT|/active> - Quit requested event 

=item *

L<SDL_USEREVENT|/active> - A user-defined event type 

=item *

L<SDL_SYSWMEVENT|/active> - Platform-dependent window manager event. 

=back

TODO: SDL_EVENTMASK()

=head2 active

C<active> is a member of the C<SDL::Event> union and is used when an event of type C<SDL_ACTIVEEVENT> is reported.

When the mouse leaves or enters the window area a C<SDL_APPMOUSEFOCUS> type activation event occurs, 
if the mouse entered the window then B<gain> will be 1, otherwise B<gain> will be 0. 

A C<SDL_APPINPUTFOCUS> type activation event occurs when the application loses or gains keyboard focus. 
This usually occurs when another application is made active. 

Finally, a C<SDL_APPACTIVE> type event occurs when the application is either minimised/iconified (B<gain>=0) or restored. 

A single event can have multiple values set in B<state>.

B<Note:> This event does not occur when an application window is first created. 

A new ActiveEvent (to fake focus loss) will be created like this:

 my $event = SDL::Event->new();
    $event->type(SDL_ACTIVEEVENT);
    $event->active_gain(0);
    $event->active_state(SDL_APPMOUSEFOCUS);

 # I think this is wrong, ->active_type() should get SDL_APPMOUSEFOCUS, but what state gets?

=head3 active_type

=head3 active_gain

=head3 active_state

=head2 key

=head3 key_type

=head3 key_state

=head3 key_keysym

=head3 key_scancode

=head3 key_sym

=head3 key_mod

=head3 key_unicode

=head2 motion

=head3 motion_type

=head3 motion_state

=head3 motion_x, motion_y

=head3 motion_xrel, motion_yrel

=head2 button

=head3 button_type

=head3 button_which

=head3 button_button

=head3 button_state

=head3 button_x, button_y

=head2 jaxis

=head3 jaxis_type

=head3 jaxis_which

=head3 jaxis_axis

=head3 jaxis_value

=head2 jbutton

=head3 jbutton_type

=head3 jbutton_which

=head3 jbutton_button

=head3 jbutton_state

=head2 jhat

=head3 jhat_type

=head3 jhat_which

=head3 jhat_hat

=head3 jhat_value

=head2 jball

=head3 jball_type

=head3 jball_which

=head3 jball_ball

=head3 jball_xrel, jball_yrel

=head2 resize

=head3 resize_type

=head3 resize_x, resize_y

=head2 expose

=head3 expose_type

=head2 syswm

=head3 syswm_type

=head3 syswm_msg

=head2 user

=head3 user_type

=head3 user_code

=head3 user_data1, user_data2

=head2 quit

=head3 quit_type

Create a new SDL::Event object.

=head1 AUTHOR

=head1 SEE ALSO

L<perl>

=cut
