=pod

=head1 NAME

SDL::RWOps -- SDL Bindings to SDL_RWOPs

=head1 CATEGORY

TODO, Core, Structure


=head1 SYNOPSIS

use SDL::RW;

=head1 METHODS


=head2 rw_from_file(file,mode) 

rw_from_file creates a new SDL::RWops structure for reading from and/or writing to a named file. 
The mode string is treated the same as in a call to the C library's fopen().
SDL::rw_from_file() returns a SDL::RWops structure on succés or undef on failure. 

	Mode Strings:
	
	"r"	Open a file for reading. The file must exist.

	"w"	Create an empty file for writing. If a file with the same name already exists its content is erased and the file is treated as a new empty file.
	
	"a"	Append to a file. Writing operations append data at the end of the file. The file is created if it does not exist.

	"r+"	Open a file for update both reading and writing. The file must exist.

	"w+"	Create an empty file for both reading and writing. 
		If a file with the same name already exists its content is erased and the file is treated as a new empty file.

	"a+"	Open a file for reading and appending. All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
		You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations will move it back to the end of file.		 The file is created if it does not exist.


NOTE: In order to open a file as a binary file, a "b" character has to be included in the mode string. 
This additional "b" character can either be appended at the end of the string (thus making the following compound modes: "rb", "wb", "ab", "r+b", "w+b", "a+b") or be inserted between the letter and the "+" sign for the mixed modes ("rb+", "wb+", "ab+"). Additional characters may follow the sequence, although they should have no effect. For example, "t" is sometimes appended to make explicit the file is a text file.



=head2 rw_from_fp(fp,autoclose)

SDL::rw_from_fp creates a new SDL::RWops structure from a file pointer, opened with stdio. If autoclose is nonzero, the file will be automatically closed when the SDL::RWops structure is closed.
It returns a SDL::RWops on succés or undef on error.

Note: This is not available under Win32, since files opened in an application on that platform cannot be used by a dynamically linked library. 


=head2 rw_from_mem(mem,size)

SDL::rw_from_mem sets up a SDL::RWops struct based on a chunk of memory of a certain size.
It returns a SDL::Rwops on succés or undef on error. 

Note: If the memory is not writable, use SDL::rw_from_const_mem instead. 


=head2 rw_from_const_mem(mem,size)

rw_from_const_mem sets up a SDL::RWops struct based on a memory area of a certain size. It assumes the memory area is not writable. 
It returns a SDL::RWops on succés on undef on error.

=head2 alloc_rw()

alloc_rw allocates an empty, unpopulated SDL::RWops structure. You must fill out the fields yourself. 
It returns a SDL::RWops structure on succés or undef on error. 

Note: You must free any memory allocated with SDL::alloc_rw with SDL::free_rw


=head2 free_rw(context)

SDL::free_rw frees an SDL::RWops structure previously allocated by SDL::alloc_rw. Only use it on memory allocated by SDL::alloc_rw. 
It doesn't returns anything.


=head2 rw_seek(ctx,offset,whence)


=cut
