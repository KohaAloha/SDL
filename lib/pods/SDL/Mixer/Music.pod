=pod

=head1 NAME

SDL::Mixer::Music - functions for music

=head1 CATEGORY

Mixer

=head1 DESCRIPTION

=head1 METHODS

=head2 load_MUS

 my $music = SDL::Mixer::Music::load_MUS( $file );

C<load_MUS> loads a music file into a C<SDL::Music::MixMusic> structure. This can be passed to L<play_music>.

=head2 hook_music

=head2 hook_music_finished

=head2 get_music_hook_data

=head2 play_music

 my $play_music = SDL::Mixer::Music::play_music( $mix_music, $loops );

C<play_music> plays a given C<SDL::Mixer::MixMusic>.
Passing -1 to C<$loops> will loop the music infinitely. 

Example:

 my $music = SDL::Mixer::Music::load_MUS( 'music.mp3' );
 
 unless(SDL::Mixer::Music::play_music($sample_music, -1))
 {
     print("Something went wrong!\n");
 }

=head2 fade_in_music

 my $music = SDL::Mixer::Music::fade_in_music( $mix_music, $loops, $ms );

Same as L<play_music> but you can specify the fade-in time by C<$ms>.

=head2 fade_out_music

 my $fading_music = SDL::Mixer::Music::fade_out_music( $ms );

C<fade_out_music> fades out the music with a duration specified in C<ms> in milliseconds.

Returns the the number of channels that will be faded out.

=head2 fading_music

 my $fading_music = SDL::Mixer::Music::fading_music();

Returns one of the following:

=over 4

=item *

MIX_NO_FADING

=item *

MIX_FADING_OUT

=item *

MIX_FADING_IN

=back

=head2 volume_music

 my $volume_before = SDL::Mixer::Music::volume_music( $new_volume );

C<volume_music> set the volume in C<$new_volume> and returns the volume that was set before.
Passing C<-1> as argument causes only to return the current volume.

Volume is between C<0> (silence) and C<MIX_MAX_VOLUME = 128>.

Example:

 # set the music volume to 1/2 maximum, and then check it
 printf( "volume was    : %d\n", SDL::Mixer::Music::volume_music( MIX_MAX_VOLUME / 2 ) );
 printf( "volume is now : %d\n", SDL::Mixer::Music::volume_music( -1 ) );

=head2 halt_music

 SDL::Mixer::Music::halt_music();

Halts the music.

=head2 pause_music

 SDL::Mixer::Music::pause_music();

Pauses the music.

=head2 resume_music

 SDL::Mixer::Music::resume_music();

Resumes the music.

=head2 rewind_music

 SDL::Mixer::Music::rewind_music();

Rewinds the music.

=head2 set_music_position

 SDL::Mixer::Music::set_music_position( $position );

Set the position of the currently playing music. The position takes different meanings for different music sources. It only works on the 
music sources listed below.

=over 4

=item MOD

The double is cast to Uint16 and used for a pattern number in the module.
Passing zero is similar to rewinding the song. 

=item OGG

Jumps to position seconds from the beginning of the song. 

=item MP3

Jumps to position seconds from the current position in the stream.
So you may want to call L<rewind_music> before this.
Does not go in reverse... negative values do nothing. 

Returns: C<0> on success, or C<-1> if the codec doesn't support this function. 

=head2 paused_music

 my $paused = SDL::Mixer::Music::paused_music();

Returns C<1> if the music is paused, otherwise C<0>.

=head2 playing_music

 my $playing_music = SDL::Mixer::Music::playing_music();

Returns C<1> if the music is playing sound, otherwise C<0>. It does'nt check if the music is paused.

=cut
