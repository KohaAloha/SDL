=pod

=head1 NAME

SDL::Events - Bindings to the Events Category in SDL API

=head1 SYNOPSIS

Most likely you just want to know how to get events for you app.
  use SDL;
  use SDL::Event;
  use SDL::Events;
  
  SDL::init(SDL_INIT_VIDEO); # Event can only be grabbed in the same thread as this 

  ...
 
  my $event = SDL::Event->new(); # notices 'Event' ne 'Events'

  while( 1 )
	{
          SDL::Events::pump_events(); 	 
       	 while(  SDL::Events::poll_event($event) )
	 {
 		#check by event type
 		on_active() if $event->type == SDL_ACTIVEEVENT; 
		...
	 }
	}

=head1 DESCRIPTION


=head1 METHODS

=head2 pump_events

Pumps the event loop, gathering events from the input devices.

	pump_events();

pump_events gathers all the pending input information from devices and places it on the event queue. Without calls to pump_events no events would ever be placed on the queue. 
Often the need for calls to pump_events is hidden from the user since L<poll_event> and L<wait_event> implicitly call pump_events. 
However, if you are not polling or waiting for events (e.g. you are filtering them), then you must call pump_events to force an event queue update.


=head2 peep_events

=head2 poll_event

=head2 push_event

=head2 wait_event 

=head1 SEE ALSO

L<SDL::Event>

=cut
