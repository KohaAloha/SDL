=pod

=head1 NAME

SDL::Joystick -- SDL Bindings for the Joystick device

=head1 CATEGORY

Core, Joystick

=head1 SYNOPSIS

 use SDL;
 use SDL::Joystick;
 
 SDL::init_sub_system(SDL_INIT_JOYSTICK);
 
 die('no joystick found') unless(SDL::Joystick::num_joysticks());
     
 my $joystick = SDL::Joystick->new(0);
 
=head1 METHODS

=head2 num_joysticks

Counts and returns available joysticks.

=head2 name

Get the implementation dependent name of joystick. The C<index> parameter refers to the N'th joystick on the system. 

 my $num_joysticks = SDL::Joystick::num_joysticks();

 printf("%d joysticks found\n", $num_joysticks);

 for($i = 0; i < $num_joysticks; $i++)
 {
     printf("%s\n", SDL::Joystick::name($i));
 }

=head2 open

Opens a joystick for use within SDL. The C<index> refers to the N'th joystick in the system. 
A joystick must be opened before it can be used.

 # Initialize the joystick subsystem
 SDL::init_sub_system(SDL_INIT_JOYSTICK);
 
 # Check for joystick
 if(SDL::Joystick::num_joysticks() > 0)
 {
     # Open joystick
     my $joystick = SDL::Joystick::open(0);
 
     if($joystick)
     {
         printf("Opened Joystick 0\n");
         printf("Name: %s\n",              SDL::Joystick::name(0));
         printf("Number of Axes: %d\n",    SDL::Joystick::num_axes($joystick));
         printf("Number of Buttons: %d\n", SDL::Joystick::num_buttons($joystick));
         printf("Number of Balls: %d\n",   SDL::Joystick::num_balls($joystick));
     }
     else
     {
         printf("Couldn't open Joystick 0\n");
     }
 
     # Close if opened
     SDL::Joystick::close($joystick) if SDL::Joystick::opened(0);
 }

=head2 opened

Determines whether a joystick has already been opened within the application. C<index> refers to the N'th joystick on the system.

Returns 1 if the joystick has been opened, or 0 if it has not.

=head2 index

Returns the C<index> of a given C<SDL_Joystick> structure. See L<SDL::Joystick::open>

=head2 num_axes

Return the number of axes available from a previously opened joystick. See L<SDL::Joystick::open>

=head2 num_balls

Return the number of trackballs available from a previously opened joystick. See L<SDL::Joystick::open>

=head2 num_hats

Gets the number of joystick hats

=head2 num_buttons

Gets the number of joystick buttons

=head2 update

Updates the state of all joysticks

=head2 get_axis

C<get_axis> returns the current state of the given axis on the given joystick.

On most modern joysticks the X axis is usually represented by axis 0 and the Y axis by axis 1. 
The value returned by C<get_axis> is a signed integer (-32768 to 32767) representing the current position of the axis, 
it may be necessary to impose certain tolerances on these values to account for jitter.

B<Note>: Some joysticks use axes 2 and 3 for extra buttons. 

Returns a 16-bit signed integer representing the current position of the axis.

 my $joystick = SDL::Joystick::open(0);

 my $x_move   = SDL::Joystick::get_axis($joystick, 0);
 my $y_move   = SDL::Joystick::get_axis($joystick, 1);

=head2 get_hat

Gets the current state of a joystick hat

=head2 get_button

Gets the current state of a given button on a given joystick

=head2 get_ball

Get the ball axis change.

 int SDL::Joystick::get_ball(SDL_Joystick $joystick, int $ball, int $dx, int $dy);

Trackballs can only return relative motion since the last call to SDL::Joystick::get_ball, these motion deltas are placed into C<dx> and C<dy>.

Returns 0 on success or -1 on failure

 my $delta_x  = 0;
 my $delta_y  = 0;
 my $joystick = SDL::Joystick::open(0);
 
 SDL::Joystick::update();
 
 printf("TrackBall Read Error!\n") if(SDL::JoystickGetBall($joystick, 0, $delta_x, $delta_y) == -1);
 printf("Trackball Delta- X:%d, Y:%d\n", delta_x, delta_y);

=head2 close

Closes a previously opened joystick 

=cut
